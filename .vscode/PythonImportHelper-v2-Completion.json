[
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "loads",
        "importPath": "json",
        "description": "json",
        "isExtraImport": true,
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "loads",
        "importPath": "json",
        "description": "json",
        "isExtraImport": true,
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "given",
        "importPath": "behave",
        "description": "behave",
        "isExtraImport": true,
        "detail": "behave",
        "documentation": {}
    },
    {
        "label": "then",
        "importPath": "behave",
        "description": "behave",
        "isExtraImport": true,
        "detail": "behave",
        "documentation": {}
    },
    {
        "label": "when",
        "importPath": "behave",
        "description": "behave",
        "isExtraImport": true,
        "detail": "behave",
        "documentation": {}
    },
    {
        "label": "given",
        "importPath": "behave",
        "description": "behave",
        "isExtraImport": true,
        "detail": "behave",
        "documentation": {}
    },
    {
        "label": "then",
        "importPath": "behave",
        "description": "behave",
        "isExtraImport": true,
        "detail": "behave",
        "documentation": {}
    },
    {
        "label": "when",
        "importPath": "behave",
        "description": "behave",
        "isExtraImport": true,
        "detail": "behave",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.firefox.service",
        "description": "selenium.webdriver.firefox.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.firefox.service",
        "documentation": {}
    },
    {
        "label": "GeckoDriverManager",
        "importPath": "webdriver_manager.firefox",
        "description": "webdriver_manager.firefox",
        "isExtraImport": true,
        "detail": "webdriver_manager.firefox",
        "documentation": {}
    },
    {
        "label": "step_given_que_eu_tenho_um_usuario_cadastrado",
        "kind": 2,
        "importPath": "features.steps.login_steps",
        "description": "features.steps.login_steps",
        "peekOfCode": "def step_given_que_eu_tenho_um_usuario_cadastrado(context):\n    context.driver.get(\"https://next-client-with-login.vercel.app/login\")\n    pass\n@when('eu faço login com \"{email}\" e \"{senha}\"')\ndef step_when_eu_faco_login_com_email_e_senha(context, email, senha):\n    texto = loads(context.text)\n    context.driver.find_element(\"id\", \"email\").send_keys(texto[\"email\"])\n    context.driver.find_element(\"id\", \"password\").send_keys(texto[\"senha\"])\n    context.driver.find_element(\"xpath\", \"//button[@type='submit']\").click()\n    time.sleep(1)",
        "detail": "features.steps.login_steps",
        "documentation": {}
    },
    {
        "label": "step_when_eu_faco_login_com_email_e_senha",
        "kind": 2,
        "importPath": "features.steps.login_steps",
        "description": "features.steps.login_steps",
        "peekOfCode": "def step_when_eu_faco_login_com_email_e_senha(context, email, senha):\n    texto = loads(context.text)\n    context.driver.find_element(\"id\", \"email\").send_keys(texto[\"email\"])\n    context.driver.find_element(\"id\", \"password\").send_keys(texto[\"senha\"])\n    context.driver.find_element(\"xpath\", \"//button[@type='submit']\").click()\n    time.sleep(1)\n    pass\n@then(\"devo ver mensagem de boas vindas que contenha {message}\")\ndef step_then_devo_ver_mensagem_de_boas_vindas(context, message):\n    welcome_message = context.driver.find_element(\"xpath\", \"//h2\").text.lower()",
        "detail": "features.steps.login_steps",
        "documentation": {}
    },
    {
        "label": "step_then_devo_ver_mensagem_de_boas_vindas",
        "kind": 2,
        "importPath": "features.steps.login_steps",
        "description": "features.steps.login_steps",
        "peekOfCode": "def step_then_devo_ver_mensagem_de_boas_vindas(context, message):\n    welcome_message = context.driver.find_element(\"xpath\", \"//h2\").text.lower()\n    TestCase().assertIn(message.lower().replace('\"', \"\"), welcome_message)\n    pass",
        "detail": "features.steps.login_steps",
        "documentation": {}
    },
    {
        "label": "step_given_que_eu_estou_na_pagina_de_cadastro",
        "kind": 2,
        "importPath": "features.steps.singup_steps",
        "description": "features.steps.singup_steps",
        "peekOfCode": "def step_given_que_eu_estou_na_pagina_de_cadastro(context):\n    # Implemente a lógica para navegar até a página de cadastro\n    context.driver.get(\"https://next-client-with-login.vercel.app/singin\")\n    pass\n@when('eu faço singup com \"usuario\", \"email\" e \"senha\"')\ndef step_when_eu_preencho_o_formulario_de_cadastro(context):\n    # Implemente a lógica para preencher o formulário de cadastro com o email, senha e confirmação de senha fornecidos\n    texto = loads(context.text)\n    context.driver.find_element(\"id\", \"username\").send_keys(texto[\"usuario\"])\n    context.driver.find_element(\"id\", \"email\").send_keys(texto[\"email\"])",
        "detail": "features.steps.singup_steps",
        "documentation": {}
    },
    {
        "label": "step_when_eu_preencho_o_formulario_de_cadastro",
        "kind": 2,
        "importPath": "features.steps.singup_steps",
        "description": "features.steps.singup_steps",
        "peekOfCode": "def step_when_eu_preencho_o_formulario_de_cadastro(context):\n    # Implemente a lógica para preencher o formulário de cadastro com o email, senha e confirmação de senha fornecidos\n    texto = loads(context.text)\n    context.driver.find_element(\"id\", \"username\").send_keys(texto[\"usuario\"])\n    context.driver.find_element(\"id\", \"email\").send_keys(texto[\"email\"])\n    context.driver.find_element(\"id\", \"password\").send_keys(texto[\"senha\"])\n    context.driver.find_element(\"id\", \"confirmPassword\").send_keys(texto[\"senha\"])\n    context.driver.find_element(\"xpath\", \"//button[@type='submit']\").click()\n    pass\n@then(\"devo ser direcionado para a tela de login\")",
        "detail": "features.steps.singup_steps",
        "documentation": {}
    },
    {
        "label": "step_then_devo_ser_direcionado_para_tela_login",
        "kind": 2,
        "importPath": "features.steps.singup_steps",
        "description": "features.steps.singup_steps",
        "peekOfCode": "def step_then_devo_ser_direcionado_para_tela_login(context):\n    # Implemente a lógica para verificar se a mensagem de cadastro bem-sucedido é exibida\n    # assert if the url changes to login\n    # wait for the page to load\n    time.sleep(2)\n    assert (\n        context.driver.current_url == \"https://next-client-with-login.vercel.app/login\"\n    )\n    pass",
        "detail": "features.steps.singup_steps",
        "documentation": {}
    },
    {
        "label": "before_all",
        "kind": 2,
        "importPath": "features.environment",
        "description": "features.environment",
        "peekOfCode": "def before_all(context):\n    # selenium 4\n    context.driver = webdriver.Firefox(\n        service=FirefoxService(GeckoDriverManager().install())\n    )\ndef before_scenario(context, scenario):\n    # context.driver.maximize_window()\n    ...\ndef before_step(context, step):\n    context.driver.implicitly_wait(7)",
        "detail": "features.environment",
        "documentation": {}
    },
    {
        "label": "before_scenario",
        "kind": 2,
        "importPath": "features.environment",
        "description": "features.environment",
        "peekOfCode": "def before_scenario(context, scenario):\n    # context.driver.maximize_window()\n    ...\ndef before_step(context, step):\n    context.driver.implicitly_wait(7)\ndef after_all(context):\n    context.driver.quit()",
        "detail": "features.environment",
        "documentation": {}
    },
    {
        "label": "before_step",
        "kind": 2,
        "importPath": "features.environment",
        "description": "features.environment",
        "peekOfCode": "def before_step(context, step):\n    context.driver.implicitly_wait(7)\ndef after_all(context):\n    context.driver.quit()",
        "detail": "features.environment",
        "documentation": {}
    },
    {
        "label": "after_all",
        "kind": 2,
        "importPath": "features.environment",
        "description": "features.environment",
        "peekOfCode": "def after_all(context):\n    context.driver.quit()",
        "detail": "features.environment",
        "documentation": {}
    }
]